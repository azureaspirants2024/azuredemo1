{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "emp_ds",
						"type": "DatasetReference"
					},
					"name": "employeename"
				},
				{
					"dataset": {
						"referenceName": "department_ds",
						"type": "DatasetReference"
					},
					"name": "departmentname"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "ModifyColumns1",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "filter1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as short,",
				"          employee as string,",
				"          {dept id} as short,",
				"          salary as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> employeename",
				"source(output(",
				"          deptid as integer,",
				"          deptname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> departmentname",
				"employeename, departmentname join({dept id} == deptid,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"filter1 derive(employee = upper(employee),",
				"          deptname = lower(deptname)) ~> ModifyColumns1",
				"join1 filter(greater({dept id}, 102)) ~> filter1",
				"ModifyColumns1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {id employee salary dept id} as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}